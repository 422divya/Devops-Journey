1- HEAD=> It points to the latest commit made in particular branch.

If you create new branch from main branch then both the branch will point to same latest commit, but if you add anything in new branch and then commit it then HEAD will be pointing to latest commit, so HEAD in new branch will be ahead of main branch.

git log or git log --oneline ===> to check the HEAD pointer

2- git diff: Compares the file between working directory and the git repository and shows the difference.

If there is file first.txt and commit it in git, but you made some changes in first.txt, then git diff will show the difference, what was added deleted from initial file.

Shows difference between old state and new state.

3- git restore file_name: It will restore the original file from git. If you have made any changes to file locally but NOT COMMITED ON GIT then git restore will retore the file.

4- git revert commit_id: Cannot restore file, it revert the commited file.

==> If we have made any changes on file and commited it, we cannot restore it using restore command, to bring file to initial state we need to run revert command so that the commit will be reverted.
Using "git log" take the id of the commite that need to be reverted.

==> git revert do not delete the file. It revert the commit made on the file. If the file was added and you revert that then that file will be deleted

==> Revert will also generate the hash id, everything in git is the commit and will generate the hash id.



5- git reset --soft commit_id==> commit id till where you need to reset the branch. Suppose there are 5 commit made and you need only first 2 commit made and latest 3 commit to vanish, so we need to give commit id of the 2nd commit id.
Reset will not store the commit ids, no one will understand that reset was made, but revert will store the commit id. 
The changes made in file in file4, file5 will be in modified state fir file3. If you run "git status" it will show file3 in modified state and not in commit state.
So whatever code was written in file4 file 5 and commited will be still there in file3, but not commited.

Using reset we cannot again get the file or changes we removed as it does not make any commit but using revert we can get the file/changes that we reverted as revert keeps the history of it in commit log.

git revert revererted_commit_id ==> 

soft reset: Normal reset, it will reset the branch till the commit we have passed as the input. The file will be in staging area

hard reset: It forcefully reset the branch. It will delete the files/content while resetting. Suppose if we add file1 and commited that file then commit id is created for it, if we perform hard reset to previous reset the file1 will be deleted.
But if we perform soft reset it will comes back to previous commit but will not delete file1.


6- Cherry pick: To pick up a perticular commit. If we need particular feature or commit from other branch to master branch we can cherry pick that feature in master branch. Use when we do not want whole branch but just some feature from it.

git cherry-pick commit_id

git cherry-pick commit_id -n: We can also cherry pick without commiting it to the specific branch. So we can make changes and then commit it.


Conflict: When we cherry pick the commit there may be conflict issue. Conflict happens when git head points to different content and when we cherrypick the commit it has some different content, so git does not know which one to pick and conflicts happens. 
So its upon us to know which one to have. When we edit that file you will see the HEAD points to different content and the commit we want to cherrypick points to different one.

We can decide which one we want.

rebase: If there is changes made in local git and someone had made chnages in remote git in same file but different content, if you try to git pull that branch on local then it will give error of branch divergence and will not pull the content in local.
If you want to pull the content inspite of different changes you can use rebase "git pull origin branch_name --rebase". It will show the error of conflict now.

Conflict happens when more than one people change same file.

Now you have option to accept both changes, accept incoming changes(means change came afterwards), accept current change(recent change where HEAD is pointing), select the options to solve the conflict

Example of conflict: So if one has made changes in code and some other developer has also made some changes in same code and if both of the try to commit, it will create conflict, so to solve it they need to decide which one to keep and which one to delete and it will resolve conflict.


So if conflict happens when we cherry pick or rebasethen fix conflict and then commit file again and again perform cherry pick or rebase as confict had occured at that time.



- Merge and Rebase:

1- Merge: To merge the commit of branches. To merge the changes from dev branch to master branch you can use merge which will add the latest commit of dev branch to the master branch. It will not perform new commits so the commit hash id remain same.

git merge branch_name : HEAD of both branch will point at same commit. Also all the commit of dev branch will be shown in "git log --oneline" which was modified on dev branch after creating new branch from master.

2- Rebase: Same as merge. It merges commit dev to master, but creates a new commit.

# git checkout master
# git rebase dev

# git checkout dev
# git rebase master


- Squash: To combine all he commits into one. While merging the branch in another branch all the commits are merge, so to avoid lots of commit logs we can use squash to combine all commit logs in one

git checkout master : You are now in master branch

git merge--squash dev && git commit -m "squash all the commit of dev beanch in one" : This will merge dev branch into master and will combine all the commit in one.

git log --oneline
