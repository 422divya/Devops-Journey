1- HEAD=> It points to the latest commit made in particular branch.

If you create new branch from main branch then both the branch will point to same latest commit, but if you add anything in new branch and then commit it then HEAD will be pointing to latest commit, so HEAD in new branch will be ahead of main branch.

git log or git log --oneline ===> to check the HEAD pointer

2- git diff: Compares the file between working directory and the git repository and shows the difference.

If there is file first.txt and commit it in git, but you made some changes in first.txt, then git diff will show the difference, what was added deleted from initial file.

Shows difference between old state and new state.

3- git restore file_name: It will restore the original file from git. If you have made any changes to file locally but NOT COMMITED ON GIT then git restore will retore the file.

4- git revert commit_id: Cannot restore file, it revert the commited file.

==> If we have made any changes on file and commited it, we cannot restore it using restore command, to bring file to initial state we need to run revert command so that the commit will be reverted.
Using "git log" take the id of the commite that need to be reverted.

==> git revert do not delete the file. It revert the commit made on the file. If the file was added and you revert that then that file will be deleted

==> Revert will also generate the hash id, everything in git is the commit and will generate the hash id.



5- git reset --soft commit_id==> commit id till where you need to reset the branch. Suppose there are 5 commit made and you need only first 2 commit made and latest 3 commit to vanish, so we need to give commit id of the 2nd commit id.
Reset will not store the commit ids, no one will understand that reset was made, but revert will store the commit id. 
The changes made in file in file4, file5 will be in modified state fir file3. If you run "git status" it will show file3 in modified state and not in commit state.
So whatever code was written in file4 file 5 and commited will be still there in file3, but not commited.

Using reset we cannot again get the file or changes we removed as it does not make any commit but using revert we can get the file/changes that we reverted as revert keeps the history of it in commit log.

git revert revererted_commit_id ==> 

soft reset: Normal reset, it will reset the branch till the commit we have passed as the input. The file will be in staging area

hard reset: It forcefully reset the branch. It will delete the files/content while resetting. Suppose if we add file1 and commited that file then commit id is created for it, if we perform hard reset to previous reset the file1 will be deleted.
But if we perform soft reset it will comes back to previous commit but will not delete file1.


6- Cherry pick: To go to particular commit.

git cherry-pick commit_id

Conflict: When we cherry pick the cmooit there may be conflict issue. Conflict happens when git head points to different content and when we cherrypick the commit it has some different content, so git does not know which one to pick and conflicts happens. 
So its upon us to know which one to have. When we edit that file you will see the HEAD points to different content and the commit we want to cherrypick points to different one.

We can decide which one we want.

rebase: If there is changes made in local git and someone had made chnages in remote git in same file but different content, if you try to git pull that branch on local then it will give error of branch divergence and will not pull the content in local.
If you want to pull the content inspite of different changes you can use rebase "git pull origin branch_name --rebase". It will show the error of conflict now.

Conflict happens when more people change same file.

Now you have option to accept both changes, accept incoming changes(means change came afterwards), accept current change(recent change), select the options to solve the conflict
